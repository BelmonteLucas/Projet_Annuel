# =============================================================================
# DOCKER COMPOSE CONFIGURATION - PROJET ANNUEL ESGI
# =============================================================================
# Architecture multi-services incluant :
# - Application web avec backend/frontend
# - Base de données PostgreSQL avec interface d'administration
# - Stack de sécurité (Snort IDS + Wazuh HIDS)
# - Stack ELK pour l'analyse des logs et la visualisation
# =============================================================================

services:
  # ==========================================================================
  # BASE DE DONNÃ‰ES - PostgreSQL
  # ==========================================================================
  # Service de base de donnÃ©es principal utilisant PostgreSQL 13
  # Stocke les donnÃ©es de l'application avec authentification sÃ©curisÃ©e
  db:
    image: postgres:13
    container_name: database_service
    environment:
      POSTGRES_USER: postgres                              # Utilisateur par dÃ©faut
      POSTGRES_PASSWORD_FILE: /run/secrets/db_password     # Mot de passe depuis un secret Docker
      POSTGRES_DB: postgres                                # Base de donnÃ©es par dÃ©faut
    ports:
      - "5432:5432"                                        # Port PostgreSQL accessible depuis l'hÃ´te
    volumes:
      - pgdata:/var/lib/postgresql/data                    # Persistance des donnÃ©es DB
    secrets:
      - db_password                                        # AccÃ¨s au secret du mot de passe
    healthcheck:                                           # VÃ©rification de l'Ã©tat de santÃ©
      test: ["CMD-SHELL", "pg_isready -U postgres -d postgres"]
      interval: 10s                                        # VÃ©rification toutes les 10s
      timeout: 5s                                          # Timeout de 5s par vÃ©rification
      retries: 5                                           # 5 tentatives avant Ã©chec
    networks:
      - backend_network                                    # Connexion au rÃ©seau backend

  # ==========================================================================
  # BACKEND API - Application Python
  # ==========================================================================
  # Service API backend construit depuis le dossier ./backend
  # GÃ¨re la logique mÃ©tier et les interactions avec la base de donnÃ©es
  backend:
    build: ./backend                                       # Construit l'image depuis le Dockerfile local
    container_name: backend_api_service
    depends_on:                                            # Attend que la DB soit prÃªte
      db:
        condition: service_healthy                         # Attend le healthcheck de la DB
    ports:
      - "8000:8000"                                        # API accessible sur le port 8000
    environment:                                           # Variables d'environnement pour la connexion DB
      DB_USER: postgres
      DB_HOST: db                                          # Nom du service DB (rÃ©solution DNS interne)
      DB_PORT: 5432                                        # Port de connexion PostgreSQL
      DB_NAME: postgres                                    # Nom de la base de donnÃ©es
    secrets:
      - db_password                                        # Accès au mot de passe DB
      - mfa_encryption_key                                 # Clé de chiffrement pour l'authentification 2FA
    volumes:
      - ./secrets:/app/secrets:ro                          # Montage du répertoire secrets (lecture seule)
    networks:
      - backend_network                                    # Connexion au réseau backend

  # ==========================================================================
  # PGADMIN - Interface d'administration PostgreSQL
  # ==========================================================================
  # Interface web pour administrer la base de donnÃ©es PostgreSQL
  # Accessible via navigateur pour gÃ©rer les donnÃ©es et schÃ©mas
  pgadmin:
    image: dpage/pgadmin4                                  # Interface d'administration PostgreSQL
    container_name: pgadmin_service
    depends_on:
      db:
        condition: service_healthy                         # Attend que la DB soit opÃ©rationnelle
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com               # Email de connexion par dÃ©faut
      PGADMIN_DEFAULT_PASSWORD: admin                      # Mot de passe de connexion par dÃ©faut
      PGADMIN_CONFIG_SERVER_MODE: 'False'                  # Mode standalone (non serveur)
    ports:
      - "5050:80"                                          # Interface web accessible sur le port 5050
    volumes:
      - pgadmin-data:/var/lib/pgadmin                      # Persistance des donnÃ©es pgAdmin
      - ./pgadmin-config/servers.json:/pgadmin4/servers.json              # Configuration serveurs prÃ©-dÃ©finis
      - ./pgadmin-config/entrypoint-pgadmin.sh:/custom-entrypoint.sh      # Script de dÃ©marrage personnalisÃ©
    secrets:
      - db_password                                        # AccÃ¨s au mot de passe DB
    entrypoint: ["/bin/sh", "/custom-entrypoint.sh"]       # Point d'entrÃ©e personnalisÃ©
    networks:
      - backend_network                                    # Connexion au rÃ©seau backend

  # ==========================================================================
  # FRONTEND WEB - Interface utilisateur
  # ==========================================================================
  # Serveur web NGINX servant l'interface utilisateur statique
  # ConfigurÃ© avec HTTPS et certificats SSL
  frontend:
    image: nginx:alpine                                    # Serveur web lÃ©ger basÃ© sur Alpine Linux
    container_name: frontend_service                       # Nom de conteneur explicite et cohÃ©rent
    depends_on:                                            # Attend que le backend soit prÃªt
      - backend                                            # DÃ©pendance sur le service backend
    ports:
      - "9080:80"                                          # HTTP accessible sur le port 9080
      - "9443:443"                                         # HTTPS accessible sur le port 9443
    volumes:
      - ./frontend:/usr/share/nginx/html:ro                # Fichiers statiques du frontend (lecture seule)
      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro    # Configuration NGINX personnalisÃ©e
      - ./secrets/nginx.crt:/etc/ssl/certs/nginx.crt:ro   # Certificat SSL (depuis secrets/)
      - ./secrets/nginx.key:/etc/ssl/private/nginx.key:ro # ClÃ© privÃ©e SSL (depuis secrets/)
    networks:
      - backend_network                                    # Connexion au rÃ©seau backend pour le proxy API

  # ==========================================================================
  # SNORT IDS - Système de détection d'intrusion
  # ==========================================================================
  # Snort en mode IDS pour surveiller le trafic réseau
  # DÃ©tecte les tentatives d'intrusion et activitÃ©s suspectes
  snort:
    build: ./snort                                         # Construction depuis le Dockerfile Snort local
    container_name: snort_service
    cap_add:
      - NET_ADMIN                                          # PrivilÃ¨ges rÃ©seau pour capturer le trafic
    # network_mode: host                                   # CommentÃ© car problÃ©matique sur Windows Docker Desktop
    networks:
      - backend_network                                    # Utilisation du rÃ©seau bridge pour Windows
    ports:
      - "8080:8080"                                        # Port pour le monitoring Snort
    command: ["monitor"]                                   # Mode monitoring pour tests et dÃ©veloppement
    volumes:
      - ./snort/rules:/etc/snort/rules:ro                 # RÃ¨gles de dÃ©tection personnalisÃ©es
      - ./snort/snort.conf:/etc/snort/snort.conf:ro       # Configuration Snort
      - snort_logs:/var/log/snort                         # Stockage des logs de dÃ©tection

  # ==========================================================================
  # WAZUH HIDS - Surveillance d'intÃ©gritÃ© des fichiers
  # ==========================================================================
  # Version simplifiÃ©e de Wazuh pour les tests de sÃ©curitÃ©
  wazuh_manager:
    image: wazuh/wazuh-manager:4.7.5
    container_name: wazuh_service
    hostname: wazuh-manager
    restart: unless-stopped
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 655360
        hard: 655360
    ports:
      - "1515:1515"                                      # Communication des agents Wazuh
      - "1514:1514/udp"                                  # RÃ©ception des logs syslog
      - "55000:55000"                                    # API RESTful Wazuh
    environment:
      - WAZUH_MANAGER_SERVICE=wazuh-manager               # Service principal Wazuh
      - WAZUH_API_SERVICE=wazuh-api                        # Service API Wazuh
      - FILEBEAT_SERVICE=filebeat                          # Service de transport des logs
      - INDEXER_URL=https://elasticsearch:9200             # URL d'Elasticsearch pour l'indexation
      - INDEXER_USERNAME=""                                # Authentification Elasticsearch (vide pour test)
      - INDEXER_PASSWORD=""                                # Mot de passe Elasticsearch (vide pour test)
      - FILEBEAT_SSL_VERIFICATION_MODE=none                # DÃ©sactivation SSL pour dev/test
    volumes:
      - wazuh_data:/var/ossec/data                         # DonnÃ©es et configuration Wazuh
      - wazuh_logs:/var/ossec/logs                         # Logs gÃ©nÃ©rÃ©s par Wazuh
      - ./backend:/host_files:ro                           # Surveillance des fichiers backend
    depends_on:
      elasticsearch:
        condition: service_healthy                       # Attendre qu'Elasticsearch soit prÃªt
    networks:
      - backend_network

  # ==========================================================================
  # ELASTICSEARCH - Moteur de recherche et d'analyse
  # ==========================================================================
  # Base de donnÃ©es NoSQL pour indexation et recherche des logs
  # CÅ“ur de la stack ELK pour l'analyse des donnÃ©es de sÃ©curitÃ©
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.9    # Version stable d'Elasticsearch
    container_name: elasticsearch_service
    environment:
      - discovery.type=single-node                         # Configuration nÅ“ud unique (non-cluster)
      - ES_JAVA_OPTS=-Xms512m -Xmx512m                     # Allocation mÃ©moire JVM (512MB min/max)
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data   # Persistance des index Elasticsearch
      - ./elk/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro
    ports:
      - "9200:9200"                                        # API REST Elasticsearch
      - "9300:9300"                                        # Port de communication inter-nÅ“uds
    healthcheck:                                           # VÃ©rification de l'Ã©tat de santÃ© d'Elasticsearch
      test: ["CMD-SHELL", "curl -s http://localhost:9200/_cluster/health?wait_for_status=yellow&timeout=1s || exit 1"]
      interval: 30s                                        # VÃ©rification toutes les 30s
      timeout: 10s                                         # Timeout de 10s par vÃ©rification
      retries: 5                                           # 5 tentatives avant Ã©chec
    networks:
      - backend_network

  # ==========================================================================
  # LOGSTASH - Collecteur et transformateur de logs
  # ==========================================================================
  # Pipeline de traitement des logs : collecte, transformation, envoi vers Elasticsearch
  # Traite les logs de Snort et Wazuh pour analyse unifiÃ©e
  logstash:
    image: docker.elastic.co/logstash/logstash:7.17.9     # Version compatible avec Elasticsearch
    container_name: logstash_service
    depends_on:
      elasticsearch:
        condition: service_healthy                         # Attend qu'Elasticsearch soit prÃªt
    volumes:
      - ./elk/logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro        # Config Logstash
      - ./elk/logstash/pipeline/logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro  # Pipeline de traitement
      - snort_logs:/var/log/snort:ro                       # AccÃ¨s aux logs Snort (lecture seule)
      - wazuh_logs:/var/log/wazuh:ro                       # AccÃ¨s aux logs Wazuh (lecture seule)
    ports:
      - "5044:5044"                                        # Port d'entrÃ©e pour les beats
    networks:
      - backend_network

  # ==========================================================================
  # KIBANA - Interface de visualisation et analyse
  # ==========================================================================
  # Dashboard web pour visualiser et analyser les donnÃ©es Elasticsearch
  # Interface principale pour le monitoring de sÃ©curitÃ©
  kibana:
    image: docker.elastic.co/kibana/kibana:7.17.9         # Interface de visualisation compatible
    container_name: kibana_service
    depends_on:
      elasticsearch:
        condition: service_healthy                         # Attend qu'Elasticsearch soit disponible
    volumes:
      - ./elk/kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml:ro    # Configuration Kibana
    ports:
      - "5601:5601"                                        # Interface web Kibana
    networks:
      - backend_network
    # RetirÃ© l'isolation rÃ©seau pour permettre l'accÃ¨s externe Ã  Kibana

# =============================================================================
# VOLUMES DOCKER - Persistance des donnÃ©es
# =============================================================================
# Volumes nommÃ©s pour garantir la persistance des donnÃ©es entre redÃ©marrages
volumes:
  pgdata:                                                  # DonnÃ©es PostgreSQL
  pgadmin-data:                                            # Configuration et donnÃ©es pgAdmin
  snort_logs:                                              # Logs du systÃ¨me de dÃ©tection Snort
  wazuh_data:                                              # DonnÃ©es et configuration Wazuh
  wazuh_logs:                                              # Logs Wazuh
  elasticsearch_data:                                      # Index et donnÃ©es Elasticsearch

# =============================================================================
# SECRETS DOCKER - Gestion sÃ©curisÃ©e des secrets
# =============================================================================
# Secrets pour protÃ©ger les informations sensibles (mots de passe, clÃ©s)
secrets:
  db_password:                                             # Mot de passe de la base de donnÃ©es
    file: ./secrets/db_password.txt
  mfa_encryption_key:                                      # ClÃ© de chiffrement pour l'authentification 2FA
    file: ./secrets/mfa_encryption_key.txt

# =============================================================================
# RÃ‰SEAUX DOCKER - Isolation et sÃ©curitÃ© rÃ©seau
# =============================================================================
# RÃ©seau backend pour les communications entre services
# ModifiÃ© pour permettre l'accÃ¨s externe Ã  Kibana tout en gardant les autres services protÃ©gÃ©s
networks:
  backend_network:
    # RetirÃ© internal: true pour permettre l'accÃ¨s Ã  Kibana depuis l'extÃ©rieur

