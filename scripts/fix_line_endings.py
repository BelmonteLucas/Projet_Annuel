#!/usr/bin/env python3
"""
Fix Line Endings - HoneyPot Pro Max
===================================

Script pour r√©soudre les probl√®mes de fins de ligne (LF/CRLF) 
apr√®s un pull Git avec des diff√©rences de plateforme.

Usage:
    python scripts/fix_line_endings.py

Auteur: √âquipe ESGI 2024-2025
"""

import os
import subprocess
import sys
from pathlib import Path

def print_banner():
    """Affiche le banner du script"""
    print("""
üîß CORRECTION DES FINS DE LIGNE
===============================
üõ°Ô∏è  HoneyPot Pro Max
üìù R√©solution des conflits LF/CRLF
    """)

def check_git_status():
    """V√©rifie s'il y a des modifications Git non commit√©es"""
    try:
        result = subprocess.run(['git', 'status', '--porcelain'], 
                              capture_output=True, text=True, cwd='.')
        return result.stdout.strip()
    except Exception as e:
        print(f"‚ùå Erreur lors de la v√©rification Git: {e}")
        return None

def fix_line_endings():
    """Corrige les fins de ligne selon .gitattributes"""
    print("\nüîÑ Application des r√®gles .gitattributes...")
    
    try:
        # √âtape 1: S'assurer que .gitattributes est bien pr√©sent
        if not Path('.gitattributes').exists():
            print("‚ùå Fichier .gitattributes manquant. Veuillez faire un pull du repository.")
            return False
        
        # √âtape 2: Renormaliser les fichiers
        print("üìù Renormalisation des fichiers...")
        result = subprocess.run(['git', 'add', '--renormalize', '.'], 
                              cwd='.', capture_output=True, text=True)
        
        if result.returncode != 0:
            print(f"‚ùå Erreur lors de la renormalisation: {result.stderr}")
            return False
        
        # √âtape 3: V√©rifier les changements
        status_output = check_git_status()
        if status_output:
            print(f"\nüìã Fichiers modifi√©s apr√®s normalisation:")
            for line in status_output.split('\n'):
                if line.strip():
                    print(f"   üìÑ {line}")
            
            print("\nüí° Actions recommand√©es:")
            print("   1. V√©rifiez les changements: git diff --cached")
            print("   2. Commitez les corrections: git commit -m 'Fix line endings'")
            print("   3. Poussez les changements: git push origin main")
        else:
            print("‚úÖ Aucune correction de fins de ligne n√©cessaire.")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la correction: {e}")
        return False

def setup_git_config():
    """Configure Git pour g√©rer automatiquement les fins de ligne"""
    print("\n‚öôÔ∏è  Configuration Git pour les fins de ligne...")
    
    configs = [
        ('core.autocrlf', 'input'),    # Convertir CRLF -> LF √† l'input
        ('core.safecrlf', 'true'),     # Avertir des conversions dangereuses
    ]
    
    for config_key, config_value in configs:
        try:
            subprocess.run(['git', 'config', config_key, config_value], 
                          cwd='.', check=True)
            print(f"   ‚úÖ {config_key} = {config_value}")
        except subprocess.CalledProcessError as e:
            print(f"   ‚ö†Ô∏è  Impossible de configurer {config_key}: {e}")

def main():
    """Fonction principale"""
    print_banner()
    
    # V√©rification du r√©pertoire Git
    if not Path('.git').exists():
        print("‚ùå Ce script doit √™tre ex√©cut√© dans la racine du projet Git.")
        sys.exit(1)
    
    # Configuration Git
    setup_git_config()
    
    # Correction des fins de ligne
    if fix_line_endings():
        print("\n‚úÖ Correction des fins de ligne termin√©e avec succ√®s!")
        print("\nüìù Note: Si votre coll√®gue continue d'avoir des probl√®mes,")
        print("   demandez-lui d'ex√©cuter ce script apr√®s chaque pull.")
    else:
        print("\n‚ùå √âchec de la correction des fins de ligne.")
        sys.exit(1)

if __name__ == "__main__":
    main()
